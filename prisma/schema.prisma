// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  plan        Plan     @default(FREE)
  status      String   @default("ACTIVE") // Organization status
  isActive    Boolean  @default(true)

  // Usage tracking
  monthlyRequestsUsed  Int?     @default(0)
  monthlyRequestLimit  Int?     @default(1000)
  currentPeriodEnd     DateTime?
  maxConcurrentJobs    Int?     @default(5)
  dataRetentionDays    Int?     @default(30)

  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  scrapers    Scraper[]
  jobs        Job[]
  apiKeys     ApiKey[]
  webhooks    Webhook[]
  usageStats  UsageStats[]

  @@map("organizations")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  username       String?      @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  name           String?      // Computed field for API compatibility
  avatar         String?
  role           Role         @default(USER)
  isActive       Boolean      @default(true)
  isVerified     Boolean      @default(false)
  timezone       String?      @default("UTC")
  language       String?      @default("en")
  preferences    Json?        // User preferences object
  lastLoginAt    DateTime?
  settings       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  jobs           Job[]
  createdJobs    Job[]       @relation("JobCreator")
  sessions       Session[]
  notifications  Notification[]
  apiKeys        ApiKey[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

model Scraper {
  id            String           @id @default(cuid())
  name          String
  description   String?
  url           String
  engine        Engine           @default(PLAYWRIGHT)
  selectors     Json             // Record<string, string>
  settings      Json             // ScrapingSettings
  schedule      Json?            // ScheduleConfig
  outputFormat  OutputFormat     @default(JSON)
  status        ScraperStatus    @default(ACTIVE)
  isActive      Boolean          @default(true)
  templateId    String?          // Reference to template used
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  jobs           Job[]
  executions     JobExecution[]

  @@map("scrapers")
}

model Job {
  id            String      @id @default(cuid())
  scraperId     String
  scraper       Scraper     @relation(fields: [scraperId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdById   String?
  createdBy     User?       @relation("JobCreator", fields: [createdById], references: [id], onDelete: SetNull)
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Job configuration (copied from scraper for convenience)
  name          String?
  description   String?
  selectors     Json?
  schedule      Json?
  outputFormat  OutputFormat @default(JSON)
  isActive      Boolean     @default(true)

  // Timing fields
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  lastSuccessAt DateTime?
  lastFailureAt DateTime?

  status        JobStatus   @default(PENDING)
  priority      Priority    @default(NORMAL)
  startedAt     DateTime?
  completedAt   DateTime?
  failedAt      DateTime?

  // Job data
  url           String
  engine        Engine
  settings      Json
  results       Json?       // Scraped data
  metadata      Json?       // Performance metrics, errors, etc.

  // Performance metrics
  duration      Int?        // Duration in milliseconds
  dataPoints    Int?        // Number of data points extracted
  dataPointsCount Int?      // Alias for compatibility
  errors        Json?       // Array of errors encountered
  warnings      Json?       // Array of warnings
  errorMessage  String?     // Last error message

  // Retry logic
  timeout       Int?        @default(30000)
  maxRetries    Int?        @default(3)
  retryCount    Int?        @default(0)

  // Results
  resultsUrl    String?     // URL to results
  avgDuration   Int?        // Average duration

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  executions    JobExecution[]
  webhooks      Webhook[]

  @@index([status])
  @@index([createdAt])
  @@index([scraperId])
  @@map("jobs")
}

model ApiKey {
  id             String       @id @default(cuid())
  name           String
  key            String       @unique
  hashedKey      String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  permissions    Json         // Array of permissions
  lastUsedAt     DateTime?
  usageCount     Int          @default(0)
  rateLimit      Int?         // Requests per minute
  isActive       Boolean      @default(true)
  expiresAt      DateTime?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("api_keys")
}

model Webhook {
  id             String       @id @default(cuid())
  name           String
  url            String
  events         Json         // Array of webhook events to listen for
  headers        Json?        // Custom headers
  secret         String?      // Webhook secret for verification
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  jobId          String?
  job            Job?         @relation(fields: [jobId], references: [id], onDelete: SetNull)

  isActive       Boolean      @default(true)
  lastTriggeredAt DateTime?
  successCount   Int          @default(0)
  failureCount   Int          @default(0)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  deliveries     WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id             String       @id @default(cuid())
  webhookId      String
  webhook        Webhook      @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  organizationId String
  url            String?      // URL for delivery

  event          String
  payload        String       // JSON stringified payload
  response       String?      // JSON stringified response
  error          String?

  status         WebhookDeliveryStatus @default(PENDING)
  attempts       Int          @default(0)
  maxAttempts    Int          @default(5)

  deliveredAt    DateTime?
  nextRetry      DateTime?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([webhookId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType   @default(INFO)
  category  String?            // job_completed, error, system, etc.
  data      Json?              // Additional notification data
  isRead    Boolean            @default(false)
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime           @default(now())

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

model ProxyProvider {
  id          String   @id @default(cuid())
  name        String
  type        String   // residential, datacenter, mobile
  endpoint    String
  username    String?
  password    String?
  locations   Json?    // Array of available locations
  settings    Json?    // Provider-specific settings
  isActive    Boolean  @default(true)
  priority    Int      @default(50)

  // Metrics
  successRate Float    @default(0.0)
  avgLatency  Int      @default(0)
  lastChecked DateTime @default(now())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("proxy_providers")
}

model UsageStatistic {
  id             String       @id @default(cuid())
  organizationId String
  date           DateTime

  // Usage metrics
  jobsCreated    Int          @default(0)
  jobsCompleted  Int          @default(0)
  jobsFailed     Int          @default(0)
  dataPoints     Int          @default(0)
  apiCalls       Int          @default(0)

  // Performance metrics
  avgDuration    Float        @default(0.0)
  totalDuration  Int          @default(0)

  createdAt      DateTime     @default(now())

  @@unique([organizationId, date])
  @@index([date])
  @@map("usage_statistics")
}

// Cache for Redis-like functionality in database
model CacheEntry {
  key       String   @id
  value     String   // JSON stringified value
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@map("cache_entries")
}

// Job Queue for Redis-like functionality
model QueueJob {
  id          String       @id @default(cuid())
  queue       String       // Queue name
  name        String       // Job type/name
  data        Json         // Job data
  priority    Int          @default(0)
  attempts    Int          @default(0)
  maxAttempts Int          @default(3)
  delay       Int?         // Delay in milliseconds

  status      QueueStatus  @default(WAITING)
  processedAt DateTime?
  failedAt    DateTime?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([queue, status])
  @@index([createdAt])
  @@map("queue_jobs")
}

model JobExecution {
  id              String    @id @default(cuid())
  jobId           String
  job             Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  scraperId       String?
  scraper         Scraper?  @relation(fields: [scraperId], references: [id], onDelete: SetNull)

  status          JobStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?      // Duration in milliseconds

  // Results
  dataPointsCount Int?      @default(0)
  outputSize      Int?      // Size of output in bytes

  // Error handling
  errorMessage    String?
  errorCode       String?
  retryAttempt    Int?      @default(0)

  // Infrastructure
  workerId        String?   // Worker that executed the job
  region          String?   // Execution region
  engine          Engine?   // Engine used for execution

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  scrapingResults ScrapingResult[]

  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@map("job_executions")
}

model ScrapingResult {
  id              String        @id @default(cuid())
  jobExecutionId  String?
  jobExecution    JobExecution? @relation(fields: [jobExecutionId], references: [id], onDelete: Cascade)

  // Data
  data            Json         // The scraped data
  dataPointsCount Int?         @default(0)
  selectors       String?      // Selectors used for scraping
  executionTime   Int?         // Execution time in milliseconds
  metadata        String?      // JSON metadata for the scraping result

  // Metadata
  sourceUrl       String
  url             String?      // Source URL for compatibility
  engine          Engine?      // Engine used for scraping
  userId          String?      // User who created this result
  extractedAt     DateTime     @default(now())
  dataHash        String?      // Hash of the data for deduplication

  createdAt       DateTime     @default(now())

  @@index([jobExecutionId])
  @@index([extractedAt])
  @@map("scraping_results")
}

model UsageStats {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Time period
  period          String   // YYYY-MM format

  // Usage metrics
  requestsCount   Int      @default(0)
  dataPointsCount Int      @default(0)
  storageBytes    BigInt   @default(0)
  executionTimeMs BigInt   @default(0)

  // Cost tracking
  estimatedCost   Float    @default(0.0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([organizationId, period])
  @@index([period])
  @@map("usage_stats")
}

// Enums
enum Role {
  ADMIN
  USER
  VIEWER
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Engine {
  PLAYWRIGHT
  JSDOM
  HTTRACK
}

enum OutputFormat {
  JSON
  CSV
  EXCEL
  XML
  PARQUET
}

enum ScraperStatus {
  ACTIVE
  PAUSED
  INACTIVE
  ERROR
}

enum JobStatus {
  PENDING
  RUNNING
  STARTED
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
  SCHEDULED
  PAUSED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum QueueStatus {
  WAITING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  PAUSED
}

enum WebhookDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  RETRYING
}
